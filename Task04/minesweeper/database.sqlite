Вот структура моего проекта. Запомни его. Дальше я напишу, что мне нужно 1) Папка bin:1.1) minesweeper#!/usr/bin/env php<?phprequire __DIR__ . '/../vendor/autoload.php';use Shindasayonara\Minesweeper\Controller;use Shindasayonara\Minesweeper\Database;use Shindasayonara\Minesweeper\View;use \RedBeanPHP\R as R;date_default_timezone_set('Europe/Moscow');// Подключаемся к базе данных через RedBeanPHPR::setup('sqlite:' . __DIR__ . '/../minesweeper.db');if (in_array('--list', $argv)) {    $games = Database::listGames();    View\showGamesList($games);    exit;}if (in_array('--replay', $argv)) {    $gameId = (int)\cli\prompt("Enter game ID to replay:");    Database::replayGame($gameId);    exit;}$width = $argv[1] ?? 10;$height = $argv[2] ?? 10;$mines = $argv[3] ?? 10;$saveToDatabase = in_array('--save', $argv);$gameId = null;$playerName = null;foreach ($argv as $arg) {    if (preg_match('/^--load=(\d+)$/', $arg, $matches)) {        $gameId = (int)$matches[1];    } elseif (preg_match('/^--name=(.+)$/', $arg, $matches)) {        $playerName = $matches[1];    }}if (!$playerName) {    $playerName = \cli\prompt("Enter your name:");}Controller\startGame($width, $height, $mines, $saveToDatabase, $gameId, $playerName);// Закрываем соединениеR::close();2) Папка src:2.1) Controller.phpСодержимое:<?phpnamespace Shindasayonara\Minesweeper\Controller;use Shindasayonara\Minesweeper\Game;use Shindasayonara\Minesweeper\Database;function startGame($width, $height, $mines, $saveToDatabase = false, $gameId = null, $playerName = null){    if ($width <= 0 || $height <= 0 || $mines < 0 || $mines >= $width * $height) {        \cli\line("Invalid game parameters. Please ensure width, height, and mines are set correctly.");        return;    }    $game = $gameId ? Database::loadGame($gameId) : new Game($width, $height, $mines);    if ($game) {        $game->play($playerName, $gameId);        if ($saveToDatabase && !$gameId) {            $gameId = Database::saveGame($game->getGameState(), $playerName);        }    } else {        \cli\line("Game with ID $gameId not found.");    }}2.2)Game.phpСодержимое:<?phpnamespace Shindasayonara\Minesweeper;class Game{    private $width;    private $height;    private $mines;    private $board;    private $revealed;    private $gameOver;    public function __construct($width, $height, $mines)    {        $this->width = $width;        $this->height = $height;        $this->mines = $mines;        $this->initializeBoard();        $this->gameOver = false;    }    private function initializeBoard()    {        $this->board = array_fill(0, $this->height, array_fill(0, $this->width, 0));        $this->revealed = array_fill(0, $this->height, array_fill(0, $this->width, false));        for ($i = 0; $i < $this->mines; $i++) {            do {                $x = rand(0, $this->width - 1);                $y = rand(0, $this->height - 1);            } while ($this->board[$y][$x] === 'M');            $this->board[$y][$x] = 'M';        }        for ($y = 0; $y < $this->height; $y++) {            for ($x = 0; $x < $this->width; $x++) {                if ($this->board[$y][$x] === 'M') {                    continue;                }                $count = 0;                for ($dy = -1; $dy <= 1; $dy++) {                    for ($dx = -1; $dx <= 1; $dx++) {                        $ny = $y + $dy;                        $nx = $x + $dx;                        if ($ny >= 0 && $ny < $this->height && $nx >= 0 && $nx < $this->width && $this->board[$ny][$nx] === 'M') {                            $count++;                        }                    }                }                $this->board[$y][$x] = $count;            }        }    }    public function play($playerName, $gameId = null)    {        $moveNumber = 0;        if ($gameId === null) {            $gameId = Database::saveGame($this->getGameState(), $playerName);        }        while (!$this->gameOver) {            View\showBoard($this->board, $this->revealed);            $input = \cli\prompt("Enter coordinates (x, y):");            $input = trim($input);            if (strpos($input, ',') === false) {                \cli\line("Invalid input format. Please use 'x, y' format.");                continue;            }            list($x, $y) = explode(',', $input);            $x = (int)trim($x);            $y = (int)trim($y);            if ($x < 0 || $x >= $this->width || $y < 0 || $y >= $this->height) {                \cli\line("Invalid coordinates!");                continue;            }            $moveNumber++;            $result = '';            if ($this->board[$y][$x] === 'M') {                $this->gameOver = true;                $result = 'взорвался';                \cli\line("Game Over! You hit a mine.");            } else {                $this->revealCell($x, $y);                if ($this->checkWin()) {                    $this->gameOver = true;                    $result = 'выиграл';                    \cli\line("Congratulations! You won!");                } else {                    $result = 'мины нет';                }            }            Database::saveMove($gameId, $moveNumber, $x, $y, $result);            \cli\line("Move #$moveNumber: ($x, $y) - $result saved.");        }        View\showBoard($this->board, $this->revealed);    }    public function revealCell($x, $y)    {        if ($this->revealed[$y][$x]) {            return;        }        $this->revealed[$y][$x] = true;        if ($this->board[$y][$x] === 0) {            for ($dy = -1; $dy <= 1; $dy++) {                for ($dx = -1; $dx <= 1; $dx++) {                    $ny = $y + $dy;                    $nx = $x + $dx;                    if ($ny >= 0 && $ny < $this->height && $nx >= 0 && $nx < $this->width) {                        $this->revealCell($nx, $ny);                    }                }            }        }    }    private function checkWin()    {        for ($y = 0; $y < $this->height; $y++) {            for ($x = 0; $x < $this->width; $x++) {                if ($this->board[$y][$x] !== 'M' && !$this->revealed[$y][$x]) {                    return false;                }            }        }        return true;    }    public function getGameState()    {        return [            'width' => $this->width,            'height' => $this->height,            'mines' => $this->mines,            'board' => $this->board,            'revealed' => $this->revealed,            'gameOver' => $this->gameOver        ];    }    public function loadFromState($state)    {        $this->width = $state['width'];        $this->height = $state['height'];        $this->mines = $state['mines'];        $this->board = $state['board'];        $this->revealed = $state['revealed'];        $this->gameOver = $state['gameOver'];    }}2.3)View.phpСодержимое:<?phpnamespace Shindasayonara\Minesweeper\View;function showStartScreen(){    \cli\line("Welcome to Minesweeper!");}function showBoard($board, $revealed){    $height = count($board);    $width = count($board[0]);    \cli\line("   " . implode(" ", range(0, $width - 1)));    for ($y = 0; $y < $height; $y++) {        $row = $y . " ";        for ($x = 0; $x < $width; $x++) {            if ($revealed[$y][$x]) {                $row .= $board[$y][$x] === 0 ? '.' : $board[$y][$x];            } else {                $row .= '?';            }            $row .= " ";        }        \cli\line($row);    }}function showGamesList($games){    \cli\line("List of saved games:");    foreach ($games as $game) {        $status = $game['gameOver'] ? 'Finished' : 'In Progress';        \cli\line("ID: {$game['id']} | Date: {$game['date']} | Player: {$game['player_name']} | Size: {$game['width']}x{$game['height']} | Mines: {$game['mines']} | Status: $status");    }}2.4)Database.phpСодержимое:<?phpnamespace Shindasayonara\Minesweeper;use \RedBeanPHP\R as R;class Database{    public static function saveGame($gameState, $playerName)    {        $game = R::dispense('games');        $game->player = $playerName;        $game->state = json_encode($gameState);        return R::store($game);    }    public static function saveMove($gameId, $moveNumber, $x, $y, $result)    {        $move = R::dispense('moves');        $move->game_id = $gameId;        $move->move_number = $moveNumber;        $move->x = $x;        $move->y = $y;        $move->result = $result;        R::store($move);    }    public static function loadGame($gameId)    {        $game = R::load('games', $gameId);        if ($game->id) {            $gameState = json_decode($game->state, true);            $gameObject = new Game($gameState['width'], $gameState['height'], $gameState['mines']);            $gameObject->loadFromState($gameState);            return $gameObject;        }        return null;    }    public static function listGames()    {        return R::findAll('games');    }    public static function replayGame($gameId)    {        $moves = R::findAll('moves', 'game_id = ?', [$gameId]);        View\showReplay($moves);    }}